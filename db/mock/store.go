// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kuthumipepple/numeris-book/db (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/kuthumipepple/numeris-book/db Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/kuthumipepple/numeris-book/db"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateInvoiceTx mocks base method.
func (m *MockStore) CreateInvoiceTx(ctx context.Context, arg db.CreateInvoiceTxParams) (db.CreateInvoiceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceTx", ctx, arg)
	ret0, _ := ret[0].(db.CreateInvoiceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceTx indicates an expected call of CreateInvoiceTx.
func (mr *MockStoreMockRecorder) CreateInvoiceTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceTx", reflect.TypeOf((*MockStore)(nil).CreateInvoiceTx), ctx, arg)
}

// InsertInvoice mocks base method.
func (m *MockStore) InsertInvoice(ctx context.Context, arg db.InsertInvoiceParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInvoice", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertInvoice indicates an expected call of InsertInvoice.
func (mr *MockStoreMockRecorder) InsertInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInvoice", reflect.TypeOf((*MockStore)(nil).InsertInvoice), ctx, arg)
}

// InsertLineItem mocks base method.
func (m *MockStore) InsertLineItem(ctx context.Context, arg db.InsertLineItemParams) (db.LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLineItem", ctx, arg)
	ret0, _ := ret[0].(db.LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLineItem indicates an expected call of InsertLineItem.
func (mr *MockStoreMockRecorder) InsertLineItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLineItem", reflect.TypeOf((*MockStore)(nil).InsertLineItem), ctx, arg)
}
